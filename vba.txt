Option Explicit

' 出力形式を切り替え（"RTF" / "PICTURE" / "OLE"）
Private Const PASTE_MODE As String = "RTF"

' Word定数（Late Binding用）
Private Const wdCollapseEnd As Long = 0
Private Const wdPasteRTF As Long = 1
Private Const wdPasteText As Long = 2
Private Const wdPasteMetafilePicture As Long = 3
Private Const wdPasteEnhancedMetafile As Long = 9
Private Const wdPasteOLEObject As Long = 0

Public Sub ExportAllSheetsToWord()
    Dim wdApp As Object        ' Word.Application
    Dim wdDoc As Object        ' Word.Document
    Dim outPath As String
    Dim ws As Worksheet
    Dim ur As Range
    Dim wr As Object
    Dim nowStr As String
    Dim shapesText As String
    Dim pasted As Boolean

    If ThisWorkbook.Path = "" Then
        MsgBox "先にこのブックを保存してください。", vbExclamation
        Exit Sub
    End If

    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.Calculation = xlCalculationManual

    nowStr = Format(Now, "yyyymmdd_HHMM")
    outPath = ThisWorkbook.Path & "\Export_" & nowStr & ".docx"

    On Error Resume Next
    Set wdApp = CreateObject("Word.Application")
    On Error GoTo 0
    If wdApp Is Nothing Then
        Call CleanUp
        MsgBox "Wordを起動できませんでした。Wordのインストールを確認してください。", vbCritical
        Exit Sub
    End If

    wdApp.Visible = True
    Set wdDoc = wdApp.Documents.Add

    ' タイトル
    Set wr = wdDoc.Content
    wr.Collapse wdCollapseEnd
    wr.InsertAfter "Excelシート出力" & vbCrLf
    wr.InsertAfter ThisWorkbook.Name & vbCrLf
    wr.InsertAfter Format(Now, "yyyy/mm/dd HH:MM") & vbCrLf & vbCrLf

    ' 全シートを順に
    For Each ws In ThisWorkbook.Worksheets
        If ws.Visible = xlSheetVisible Then
            Set ur = GetSafeUsedRange(ws)
            If Not ur Is Nothing Then
                ' 見出し
                Set wr = wdDoc.Content
                wr.Collapse wdCollapseEnd
                wr.InsertAfter "【" & ws.Name & "】" & vbCrLf
                wr.SetRange Start:=wr.End - Len("【" & ws.Name & "】" & vbCrLf), _
                            End:=wr.End
                wr.Bold = True

                ' データ貼り付け
                pasted = PasteRangeToWord(ur, wdDoc, PASTE_MODE)
                If pasted = False Then
                    Set wr = wdDoc.Content
                    wr.Collapse wdCollapseEnd
                    wr.InsertAfter "(貼り付けに失敗しました)" & vbCrLf
                End If

                ' 図・図形テキスト
                shapesText = GetShapesText(ws)
                If Len(shapesText) > 0 Then
                    Set wr = wdDoc.Content
                    wr.Collapse wdCollapseEnd
                    wr.InsertAfter vbCrLf & "＜図・図形テキスト＞" & vbCrLf & shapesText & vbCrLf
                End If

                ' 区切り
                Set wr = wdDoc.Content
                wr.Collapse wdCollapseEnd
                wr.InsertAfter vbCrLf
            End If
        End If
    Next ws

    On Error Resume Next
    wdDoc.SaveAs2 outPath
    On Error GoTo 0

    Call CleanUp
    MsgBox "Wordへ出力しました：" & outPath, vbInformation
End Sub

' 範囲をWordへ貼り付け（出力形式切替）
Private Function PasteRangeToWord(ByVal rng As Range, ByVal wdDoc As Object, ByVal mode As String) As Boolean
    Dim wr As Object
    On Error GoTo ErrHandler

    rng.Copy
    Set wr = wdDoc.Content
    wr.Collapse wdCollapseEnd

    Select Case UCase$(mode)
        Case "RTF"
            wr.PasteSpecial DataType:=wdPasteRTF
        Case "PICTURE"
            wr.PasteSpecial DataType:=wdPasteEnhancedMetafile
        Case "OLE"
            wr.PasteSpecial DataType:=wdPasteOLEObject
        Case Else
            wr.PasteSpecial DataType:=wdPasteRTF
    End Select

    PasteRangeToWord = True
    Exit Function

ErrHandler:
    PasteRangeToWord = False
End Function

' UsedRangeを安全に取得
Private Function GetSafeUsedRange(ByVal ws As Worksheet) As Range
    Dim ur As Range
    On Error Resume Next
    Set ur = ws.UsedRange
    On Error GoTo 0

    If ur Is Nothing Then
        Set GetSafeUsedRange = Nothing
    ElseIf Application.WorksheetFunction.CountA(ur) = 0 Then
        Set GetSafeUsedRange = Nothing
    Else
        Set GetSafeUsedRange = ur
    End If
End Function

' 図・図形のテキストを回収
Private Function GetShapesText(ByVal ws As Worksheet) As String
    Dim shp As Shape
    Dim t As String
    Dim buf As String

    For Each shp In ws.Shapes
        t = ""

        On Error Resume Next
        If shp.TextFrame2.HasText Then
            t = shp.TextFrame2.TextRange.Text
        ElseIf shp.TextFrame.Characters.Count > 0 Then
            t = shp.TextFrame.Characters.Text
        End If
        On Error GoTo 0

        If Len(Trim$(t)) = 0 Then
            t = shp.AlternativeText
        End If

        If Len(Trim$(t)) > 0 Then
            buf = buf & "・" & t & vbCrLf
        End If
    Next shp

    GetShapesText = buf
End Function

' 後片付け
Private Sub CleanUp()
    On Error Resume Next
    Application.Calculation = xlCalculationAutomatic
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
End Sub
